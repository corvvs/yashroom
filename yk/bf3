#!yasl

// スタック3つでBrainf**k (目標)

{
	print "\n" print
} puts

{
	"A" - 65 +
} char_to_i

{
	"\0         \n                      !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~                                                                                                                                 "
	2 ^
	256 %
	]#[
	print
}	putchar

{
	! (
		read
		!
		0 ]#[
	)
	char_to_i 
}	getchar

{
	1 + ^
}	popup_item

{
	1 + !^
}	pushdown_item

{
	1 + 256 % 
}	increment_byte

{
	1 - 256 + 256 % 
}	decrement_byte

{
	1 - (1 + 30000 % ) 1 +
}	increment_ptr

{
	1 - (1 - 30000 + 30000 % ) 1 +
}	decrement_ptr

{
	2:(1 +):2
	1:0
}	_increment_pc

{ 0:(2 ^ ! 1 2 !^):0 } _start_forward_jump
{ 0:(2 ^ ! 0 2 !^):0 } _stop_forward_jump

{
	2:=:2
	// 0: [ptr: int, forward_jump: int]
	// 1: [code: string]
	// 2: [pc_in_local: int, pc_at_start: int, ...]
	// 9: [memory: int[30000]]
	1 @(
		2:=:1 1:%]#[ 1:!

		(= "_" == ) ? (
			// ("program end" puts)
			0
		) : (
		// check forward_jump
		// - ジャンプモードなら:
		//   - op が "]"なら停止
		//   - そうでないならpcを1増やす
		// - そうでないなら: 次の評価へ移る
		(3 ^ = 4 !^) ? (
			("]" == ) ? (
				_stop_forward_jump
			)
			_increment_pc
		) : (
		(= ">" == ) ? (
			// ("increment ptr" puts)
			! increment_ptr
			_increment_pc
		) : (
		(= "<" == ) ? (
			// ("decrement ptr" puts)
			! decrement_ptr
			_increment_pc
		) : (
		(= "+" == ) ? (
			// ("increment *ptr" puts)
			!
			9:(
				(0:= popup_item)
				increment_byte
				(0:= pushdown_item)
			):9
			_increment_pc
		) : (
		(= "-" == ) ? (
			// ("decrement *ptr" puts)
			!
			9:(
				(0:= popup_item)
				decrement_byte
				(0:= pushdown_item)
			):9
			_increment_pc
		) : (
		(= "." == ) ? (
			// ("output *ptr" puts)
			!
			9:(
				(0:= popup_item)
				(= putchar)
				(0:= pushdown_item)
			):9
			_increment_pc
		) : (
		(= "," == ) ? (
			// ("read a byte and set into *ptr" puts)
			!
			9:(
				(0:= popup_item)
				getchar
				(0:= pushdown_item)
			):9
			_increment_pc
		) : (
		(= "[" == ) ? (
			// ("conditional forward jump to ]" puts)
			!
			9:(
				(0:= popup_item)
				(= 0 ==) ? (
					_start_forward_jump
				) : (
					2:(=):2
				)
				(0:= pushdown_item)
			):9
			_increment_pc
		) : (
		(= "]" == ) ? (
			// ("conditional backward jump to [" puts)
			!
			9:(
				(0:= popup_item)
				(= 0 !=) ? (
					2:(! =):2
				) : (
					2:(2 ^ !):2
				)
				(0:= pushdown_item)
			):9
			_increment_pc
		) : (
			!
			_increment_pc
		))))))))))
	)
} interpret

// -------------------------------------------------------------

// 1: [code: string]
(! ! =:1 !)
1:("_" +):1
// 0: [ptr: int, forward_jump: int]
0:(0 1):0
// 2: [pc int, ...]
2:(0):2
// 9: [memory: int[30000]]
9:(30000 1 + #(0)):9

0:interpret:0
