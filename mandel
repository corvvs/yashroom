#!yasl

// エラーメッセージを表示してexitする
// スタックが [message, exit_status] のとき,
// message が表示され, 終了ステータスは exit_status.
{ "error: " print print "\n" print 1 exit } error_exit

{ "A" - 65 + } char_to_i

// in use: c start end within
// in:  [end: int, start: int, c: int]
// out: [result: int(bool)]
// `result` indicates that: start <= c && c <= end
{
	=:9 ! 2 ^ =:9 // in: [c, start], 9: [c, end]
	<= // in: [start <= c], 9: [c, end]
	9:>= // in: [start <= c, c <= end]
	&&
}	within

// in:  [char: some]
// out: [result: int(bool)]
{
	char_to_i "0" char_to_i "9" char_to_i within
}	is_digit

// in:  [arg: string]
// out: [result: int(bool)]
{
	=:9 !
	9:][:9
	9:!
	1:8
	// in: [], 8: [result: int(bool)], 9: [...chars: string]
	1 @ (
		// in: []
		9:# 0 > 8:= && = ? (
			// ループ継続
			// in: [true]
			9:= 9:!
			is_digit
			? ( 1:8 ) : ( 0:8 ) 8:&&:8
		) : (
			// in: [false]
			8:= 2 !^
		)
	)
	8:!
}	are_digits

// 指定したスタックの要素数を出力する
// スタックが [stack_no] のとき, スタック stack_no の要素数を出力する
{
	(
		"#" 0:print
		= 0:print
		" = " 0:print
		$0:#:0 0:print
		"\n":0 0:print
	):0
} print_count

// 指定したスタックの個数と中身を表示する
// スタックが [stack_no] のとき, スタック stack_no が対象となる
// ※スタックの中身を全て空にする
{
	= print_count
	=:0
	0:(
		=
		$0:#
		0
		>
		? (
			=
			$0:# #(
				=
				=
				$0:=
				print "\n" print
				$0:!
			)
			!
		)
	):0
}	exhaust_stack

// 数値が画面サイズとしてふさわしいかどうかをチェック
// ふさわしくない場合はエラー終了する
// 呼び出し時のスタックは[size]
{
	= 0 <= ? (1 "size must be positive!!" error_exit)
}	is_valid_size

// 現在位置に対応する座標を計算して返す.
// スタックが [size, index] のとき, 
// float(index * 2 - size) / size だけをスタックに入れて返す
{
	=:1 ! // size
	=:2 ! // index
	0:(
		2:2 2:*:2
		2:=
		1:=
		-
		1:=
		0.0 + // floatに変換
		1:! 2:!
	):0
	0:/
	2.0 *
}	coordinate

// in:  [i: int or float]
// out: [f: int]
{ 0 + }	to_i

// in:  [i: int or float]
// out: [f: float]
{ 0.0 + }	to_f

// in:  [divider: float, x: float]
// out: [divided_x: float]
{
	=:9 ! // in: [x], 9: [divider]
	9:= * // in: [x * divider], 9: [divider]
	9:! // in: [x * divider], 9: []
	=:9
	=:9 9:to_i:9 9:to_f:9
	!
	9:-
}	divide

// マンデルブロ集合における発散回数を求める
// 入力スタックが [b: float, a: float] のとき,
// 出力スタックに [speed of divergence: float] が入る.
// (入力スタックの引数は消費される)
{
	=:4 ! // 4: [b]
	=:3 ! // 3: [a]

	0.0:6 0.0:7 // 6: [x] 7: [y]

	40:2 0:2 2:%>:2 2:@ 0:(
		2:=:5 // 5: [i]

		6:= 6:= * // 0: [x ** 2]
		7:= 7:= * // 0: [y ** 2, x ** 2]
		- // 0: [x ** 2 - y ** 2]
		3:= + // 0: [x ** 2 - y ** 2 + a = x1]
		=:1 =:1 1:*:1

		2 6:= 7:= * * // 0:[2 * x * y, x1]
		4:= + // 0:[2 * x * y + b = y1, x1]
		=:1 =:1 1:*:1

		1:+:1 // 1: [x1 ** 2 + y1 ** 2]

		7:! =:7 ! // 0: [x1] 7: [y1]
		6:! =:6 ! // 0: [] 6: [x1]

		// ループ条件: 回数
		1:2 2:+:2 2:%>:2
		// ループ条件: 発散
		100:1 1:<:2
		2:&&:2

	):0 2:=:1 2:! 2:!
	3:! 4:! 6:! 7:!

	1:=:1 40:1 1:>=:1 1:? (
		1:! 0
	) : (
		40.0:1 1:/
	)
}	divergence_mandel

// 発散パラメータをもとにピクセルの色を計算する.
// 入力スタックが [divergence: float] のとき,
// 出力スタックに [red: int, green: int, blue: int] が入る.
// (入力スタックの引数は消費される)
{
	// in: [divergence]
	=:9
	// 9:=:9 9:print " ":9 9:print
	! // 9: [divergence]
	9:=:8 2.2:8 8:divide:8 255.0:8 8:*:8 0:8 8:+
	9:=:8 0.4:8 8:divide:8 255.0:8 8:*:8 0:8 8:+
	9:=:8 2.3:8 8:divide:8 255.0:8 8:*:8 0:8 8:+
	9:!
}	pixel_color

// in: [red: int, green: int, blue: int]
// out: [esc: string]
// r,g,b = r,g,b * 6 / 256 
// n = 16 + (r*6*6 + g*6 + b)
{
	3 #(6 * 256 / 3 ^)
	6 * + 6 * +
	16 +
	(
		"\e[48;5;" = ""
		9:+ 9:+ 
		"m  \e[0m" 9:+
	):9
	!
	9:(= !)
}	make_escape_sequence

{
	[#] 0 <= ? ( "blank string?" error_exit )
	= are_digits 0 == ? ( "not an integer?" error_exit )
	eval
	is_valid_size
}	is_a_positive_integer
// ---------------------------------------------------------------

// argc = 3 であることを確認
3 != ? (1 "just 2 arguments are needed!!" error_exit)

!
is_a_positive_integer
=:8
!
is_a_positive_integer
=:9
!

// [状況]
// スタック8: [W]
// スタック9: [H]
// 他は空

9:=:2 0:2 2:%>=:2 2:@ 0:(
	2:=:3 // 3: [i]
	1:2 2:+:2 2:%>=:2

	8:=:2 0:2 2:%>=:2 2:@ 0:(
		2:=:4 // 4: [j]
		1:2 2:+:2 2:%>=:2

		4:=:0 8:=:0 coordinate
		3:=:0 9:=:0 coordinate

		4:!
		// 0: [b, a]
		divergence_mandel
		pixel_color
		make_escape_sequence
		print

	):0 2:! 2:!
	"\n" print
	3:!
):0 2:! 2:!
